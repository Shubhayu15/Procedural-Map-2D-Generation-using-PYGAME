import pygame
import sys
import random
import math

# Initialize Pygame
pygame.init()

# Grid settings
CELL_SIZE = 22  # Size of each cell
GRID_WIDTH = 33
GRID_HEIGHT = 33
WINDOW_WIDTH = GRID_WIDTH * CELL_SIZE + 200  # Added space for panel on the right
WINDOW_HEIGHT = GRID_HEIGHT * CELL_SIZE

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (55, 255, 0)
GRAY = (200, 200, 200)
BLUE = (0, 100, 255)
BUTTON_COLOR = (100, 200, 100)
BUTTON_HOVER_COLOR = (150, 255, 150)

# Create a Pygame window
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("Maze with Loop Routes")

# Fonts and UI elements
font = pygame.font.Font(None, 36)
small_font = pygame.font.Font(None, 28)

# Create the grid
grid = [[1 for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]  # Start with all walls

# Initial seed and input text
seed_text = ""
current_seed = None

# Define directions for maze generation
DIRECTIONS = [(0, 1), (1, 0), (0, -1), (-1, 0)]

# Player settings
player_x = 1.5  # Start position
player_y = 1.5
player_angle = 0
move_speed = 0.1
turn_speed = 0.05

# Game states
STATE_EDITOR = 0
STATE_GAME = 1
current_state = STATE_EDITOR

# Helper function to draw text
def draw_text(text, font, color, surface, x, y):
    text_obj = font.render(text, True, color)
    text_rect = text_obj.get_rect(topleft=(x, y))
    surface.blit(text_obj, text_rect)

# Draw the grid
def draw_grid():
    for row in range(GRID_HEIGHT):
        for col in range(GRID_WIDTH):
            color = WHITE if grid[row][col] == 0 else GREEN
            pygame.draw.rect(screen, color, (col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE))
            pygame.draw.rect(screen, BLACK, (col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE), 1)

# Function to modify the grid
def modify_grid(pos):
    row, col = pos
    if grid[row][col] == 1:  # If it's a wall, change to path
        grid[row][col] = 0
    elif grid[row][col] == 0:  # If it's a path, change to wall
        grid[row][col] = 1

# Randomly generate the maze using Recursive Backtracking
def generate_maze(x, y):
    grid[y][x] = 0  # Mark the current cell as a path

    # Randomize the order of directions
    random.shuffle(DIRECTIONS)

    for direction in DIRECTIONS:
        nx, ny = x + direction[0] * 2, y + direction[1] * 2

        if 0 < nx < GRID_WIDTH and 0 < ny < GRID_HEIGHT and grid[ny][nx] == 1:
            grid[y + direction[1]][x + direction[0]] = 0  # Remove wall between cells
            generate_maze(nx, ny)  # Recursively generate from the new cell

# Random dungeon generation with a maze
def generate_dungeon(seed):
    random.seed(seed)

    # Clear grid
    for row in range(GRID_HEIGHT):
        for col in range(GRID_WIDTH):
            grid[row][col] = 1  # Fill everything with walls (green)

    # Create the 1-block boundary
    for row in range(GRID_HEIGHT):
        grid[row][0] = 1  # Left boundary
        grid[row][GRID_WIDTH - 1] = 1  # Right boundary
    for col in range(GRID_WIDTH):
        grid[0][col] = 1  # Top boundary
        grid[GRID_HEIGHT - 1][col] = 1  # Bottom boundary

    # Start maze generation from a random cell
    start_x = random.randrange(1, GRID_WIDTH - 1, 2)
    start_y = random.randrange(1, GRID_HEIGHT - 1, 2)
    generate_maze(start_x, start_y)

# Button functionality
def draw_button(x, y, width, height, text):
    mouse_pos = pygame.mouse.get_pos()
    mouse_click = pygame.mouse.get_pressed()

    if x < mouse_pos[0] < x + width and y < mouse_pos[1] < y + height:
        pygame.draw.rect(screen, BUTTON_HOVER_COLOR, (x, y, width, height))
        if mouse_click[0]:  # Left mouse button
            if text == "Quit":
                pygame.quit()
                sys.exit()
            elif text == "Play":
                global current_state
                current_state = STATE_GAME
    else:
        pygame.draw.rect(screen, BUTTON_COLOR, (x, y, width, height))

    draw_text(text, font, BLACK, screen, x + 10, y + 10)

# Raycasting function
def cast_rays():
    num_rays = 120
    fov = math.pi / 3
    wall_height = 600  # Height of the wall to be rendered

    for i in range(num_rays):
        ray_angle = player_angle - fov / 2 + (fov / num_rays) * i
        depth = 0

        while depth < 20:
            ray_x = player_x + depth * math.cos(ray_angle)
            ray_y = player_y + depth * math.sin(ray_angle)

            map_x = int(ray_x)
            map_y = int(ray_y)

            if 0 <= map_x < GRID_WIDTH and 0 <= map_y < GRID_HEIGHT:
                if grid[map_y][map_x] == 1:  # Collision with wall
                    break
            depth += 0.1

        # Draw the wall slice based on depth
        line_height = wall_height / (depth + 0.0001)  # Avoid division by zero
        line_top = (WINDOW_HEIGHT // 2) - (line_height // 2)
        line_bottom = (WINDOW_HEIGHT // 2) + (line_height // 2)

        color = (255, 0, 0)  # Wall color
        pygame.draw.rect(screen, color, (i * (WINDOW_WIDTH / num_rays), line_top, (WINDOW_WIDTH / num_rays), line_height))

        # Draw the actual wall for full coverage
        full_wall_height = int(line_height)
        pygame.draw.rect(screen, color, (i * (WINDOW_WIDTH / num_rays), line_top, (WINDOW_WIDTH / num_rays), full_wall_height))

# Handle player movement
def handle_player_movement():
    global player_x, player_y, player_angle
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]:
        new_x = player_x + move_speed * math.cos(player_angle)
        new_y = player_y + move_speed * math.sin(player_angle)
        if grid[int(new_y)][int(new_x)] == 0:
            player_x = new_x
            player_y = new_y
    if keys[pygame.K_DOWN]:
        new_x = player_x - move_speed * math.cos(player_angle)
        new_y = player_y - move_speed * math.sin(player_angle)
        if grid[int(new_y)][int(new_x)] == 0:
            player_x = new_x
            player_y = new_y
    if keys[pygame.K_LEFT]:
        player_angle -= turn_speed
    if keys[pygame.K_RIGHT]:
        player_angle += turn_speed

# Draw minimap
def draw_minimap():
    minimap_scale = 10
    minimap_width = GRID_WIDTH * minimap_scale
    minimap_height = GRID_HEIGHT * minimap_scale
    minimap_x = GRID_WIDTH * CELL_SIZE + 10
    minimap_y = 250

    # Draw minimap background
    pygame.draw.rect(screen, BLACK, (minimap_x, minimap_y, minimap_width, minimap_height))
    
    for row in range(GRID_HEIGHT):
        for col in range(GRID_WIDTH):
            if grid[row][col] == 0:  # Path
                pygame.draw.rect(screen, GREEN, (minimap_x + col * minimap_scale, minimap_y + row * minimap_scale, minimap_scale, minimap_scale))
            else:  # Wall
                pygame.draw.rect(screen, WHITE, (minimap_x + col * minimap_scale, minimap_y + row * minimap_scale, minimap_scale, minimap_scale))

    # Draw player position on minimap
    player_minimap_x = minimap_x + player_x * minimap_scale
    player_minimap_y = minimap_y + player_y * minimap_scale
    pygame.draw.circle(screen, BLUE, (int(player_minimap_x), int(player_minimap_y)), 5)

# Main loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            grid_pos = (mouse_pos[1] // CELL_SIZE, mouse_pos[0] // CELL_SIZE)
            if grid_pos[0] < GRID_HEIGHT and grid_pos[1] < GRID_WIDTH:
                modify_grid(grid_pos)

        # Key press for text input
        elif event.type == pygame.KEYDOWN:
            if event.unicode.isdigit():
                seed_text += event.unicode
            elif event.key == pygame.K_BACKSPACE:
                seed_text = seed_text[:-1]
            elif event.key == pygame.K_RETURN:
                if seed_text.isdigit():
                    current_seed = int(seed_text)
                    generate_dungeon(current_seed)
            elif event.key == pygame.K_r:  # Randomize the seed
                current_seed = random.randint(0, 9999)
                seed_text = str(current_seed)
                generate_dungeon(current_seed)
            elif event.key == pygame.K_c:  # Clear/reset the grid
                seed_text = ""
                current_seed = None
                grid = [[1 for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]  # Reset to walls

    # Draw the grid
    screen.fill(GRAY)

    if current_state == STATE_EDITOR:
        draw_grid()
    elif current_state == STATE_GAME:
        cast_rays()
        draw_minimap()
        handle_player_movement()

    # Panel UI
    pygame.draw.rect(screen, BLUE, (GRID_WIDTH * CELL_SIZE, 0, 200, WINDOW_HEIGHT))  # Right panel background
    draw_text("Seed:", font, WHITE, screen, GRID_WIDTH * CELL_SIZE + 10, 10)
    pygame.draw.rect(screen, WHITE, (GRID_WIDTH * CELL_SIZE + 10, 50, 180, 40))
    draw_text(seed_text, small_font, BLACK, screen, GRID_WIDTH * CELL_SIZE + 15, 55)

    draw_text("Press Enter to Generate", small_font, WHITE, screen, GRID_WIDTH * CELL_SIZE + 10, 110)
    draw_text("Press R for Random Seed", small_font, WHITE, screen, GRID_WIDTH * CELL_SIZE + 10, 150)
    draw_text("Press C to Reset", small_font, WHITE, screen, GRID_WIDTH * CELL_SIZE + 10, 190)

    # Draw buttons
    draw_button(GRID_WIDTH * CELL_SIZE + 10, 250, 180, 40, "Play")
    draw_button(GRID_WIDTH * CELL_SIZE + 10, 300, 180, 40, "Quit")

    pygame.display.flip()

pygame.quit()
